import axios from "axios";
import React, { useState, useEffect } from "react";
import { FaSpinner } from "react-icons/fa";
import AudioRecorder from "./Recorder";
import SessionSummary from "./Details";
import { useAuthApi } from "../hooks/useAuthapi";

const DrivingQuestionStep = ({ data, onNext, onBack }) => {
  const [questions, setQuestions] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [feedback, setFeedback] = useState("");
  const [sessionId, setSessionId] = useState("");
  const [error, setError] = useState("");
  const [audioBlob, setAudioBlob] = useState(null);
  const [loadingQuestions, setLoadingQuestions] = useState(false);
  const [addingQuestion, setAddingQuestion] = useState(false);
  const [completed, setCompleted] = useState(false);
  const [generatingNewQuestion, setGeneratingNewQuestion] = useState(false);
  const [generatingFeedback, setGeneratingFeedback] = useState(false);
  const api=useAuthApi();

  // Initial generation of questions and creation of session
  const generateQuestions = async () => {
    setLoadingQuestions(true);
    setError("");
    try {
      const uuid = crypto.randomUUID();
      const formData = new FormData();
      if (data.previousSelected) {
        formData.append("s3_ref", data.resume);
      } else {
        formData.append("pdf_file", data.resume);
      }
      formData.append("job_description", data.jobDescription);
      formData.append("job_title", data.jobTitle);
      // Assume num_questions here represents the planned total number of questions for the interview.
      formData.append("num_questions", 2);
      formData.append("session_id", uuid);
      formData.append("user_id", 1);

      const response = await api.post(`/generate_questions/`, formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      setSessionId(uuid);
      // The initial question(s) generated by the API
      setQuestions(response.data.questions);
    } catch (err) {
      console.error("Error generating questions:", err);
      setError("Failed to generate questions. Please try again.");
    }
    setLoadingQuestions(false);
  };

  useEffect(() => {
    generateQuestions();
  }, []);

  // Function to generate the next question based on the current conversation
  const generateNextQuestion = async (conversationQuestions, conversationTranscripts) => {
    setGeneratingNewQuestion(true);
    try {
      const response = await api.post(`/update_question/`, {
        session_id: sessionId,
        questions: conversationQuestions,
        answers: conversationTranscripts,
      });
      // Append the new question to the questions array
      const newQuestion = response.data.question;
      setQuestions((prev) => [...prev, newQuestion]);
      setCurrentQuestionIndex((prev) => prev + 1);
    } catch (err) {
      console.error("Error generating next question:", err);
      setError("Failed to generate next question. Please try again.");
    }
    setGeneratingNewQuestion(false);
  };

  // Submit the recorded answer using the audioBlob provided by AudioRecorder.
  const handleSubmitAnswer = async () => {
    if (!audioBlob) {
      setError("No recorded answer found. Please record your answer first.");
      return;
    }
    setAddingQuestion(true);
    setError("");
    try {
      // Transcribe audio
      const formDataTranscription = new FormData();
      formDataTranscription.append("answer", audioBlob, `answer_${sessionId}_${currentQuestionIndex}.webm`);
      const transcriptionResponse = await api.post(
        `/transcribe_audio/`,
        formDataTranscription,
        { headers: { "Content-Type": "multipart/form-data" } }
      );

      // Submit the answer along with its transcript
      const formDataSubmission = new FormData();
      formDataSubmission.append("question_id", questions[currentQuestionIndex].id);
      formDataSubmission.append("answer", audioBlob, `answer_${sessionId}_${currentQuestionIndex}.webm`);
      formDataSubmission.append("transcript", transcriptionResponse.data.audio_text);
      await api.post(`/api/questions/`, formDataSubmission, {
        headers: { "Content-Type": "multipart/form-data" },
      });

      // Clear the blob for the next question
      setAudioBlob(null);

      // Check if this is the last question based on initial count (e.g., if interview is complete)
      // Here we assume the total planned number of questions is the length of the initial questions array.
      if (questions.length >= Number(data.numQuestions) && currentQuestionIndex === questions.length - 1) {
        // Generate feedback since the interview is complete.
        setGeneratingFeedback(true);
        const qsResponse = await api.get(
          `/api/questions/?limit=${questions.length}&session_id=${sessionId}`
        );
        const allQuestions = qsResponse.data.results.map((item) => item.question);
        const allTranscripts = qsResponse.data.results.map((item) => item.transcript);
        const aiFeedbackResponse = await api.post(`/ai_feedback/`, {
          session_id: sessionId,
          questions: allQuestions,
          answers: allTranscripts,
        });
        // Assume the session summary or feedback comes from the session API
        const session_summary = await api.get(`/api/session/${sessionId}/`);
        setFeedback(session_summary.data);
        setCompleted(true);
        setGeneratingFeedback(false);
      } else {
        // Prepare conversation context for generating the next question
        // Gather all previous questions and transcripts
        const qsResponse = await api.get(
          `/api/questions/?limit=${currentQuestionIndex + 1}&session_id=${sessionId}`
        );
        const conversationQuestions = qsResponse.data.results.map((item) => item.question);
        const conversationTranscripts = qsResponse.data.results.map((item) => item.transcript);

        // Generate a new question based on the conversation context
        await generateNextQuestion(conversationQuestions, conversationTranscripts);
      }
    } catch (err) {
      console.error("Error processing answer:", err);
      setError("Failed to process answer. Please try again.");
    } finally {
      setAddingQuestion(false);
    }
  };

  const handleRetryAll = () => {
    setError("");
    setQuestions([]);
    setSessionId("");
    setCurrentQuestionIndex(0);
    generateQuestions();
  };

  const controlsDisabled = completed;

  return (
    <>
      {completed ? (
        <SessionSummary sessionId={sessionId} />
      ) : (
        <div>
          {sessionId ? (
            <>
              {questions.length === 0 || loadingQuestions ? (
                <div className="flex items-center justify-center">
                  <FaSpinner className="animate-spin text-blue-500 mr-2" size={24} />
                </div>
              ) : (
                <div>
                  <p className="mb-2 font-medium text-center transition-all duration-500 ease-in-out">
                    Question {currentQuestionIndex + 1}: {questions[currentQuestionIndex].question}
                  </p>
                  <AudioRecorder audioBlob={audioBlob} setAudioBlob={setAudioBlob} />
                  <div className="my-2">
                    <button
                      onClick={handleSubmitAnswer}
                      disabled={!audioBlob || controlsDisabled || addingQuestion || generatingNewQuestion || generatingFeedback}
                      className={`bg-primary text-white py-2 px-4 rounded transition flex justify-center items-center w-full text-center ${
                        !audioBlob || controlsDisabled ? "opacity-50 cursor-not-allowed" : "hover:bg-blue-600"
                      }`}
                    >
                      {addingQuestion && (
                        <FaSpinner className="animate-spin text-white mr-2" size={24} />
                      )}
                      {addingQuestion
                        ? "Submitting answer..."
                        : generatingNewQuestion
                        ? "Generating new question..."
                        : generatingFeedback
                        ? "Generating feedback..."
                        : "Submit Answer"}
                    </button>
                  </div>
                  {error && (
                    <div className="text-blue-500 text-center">
                      <p>{error}</p>
                      <button onClick={handleRetryAll} className="underline">
                        Retry
                      </button>
                    </div>
                  )}
                </div>
              )}
            </>
          ) : (
            <div className="flex flex-col items-center justify-center">
              {loadingQuestions ? (
                <div className="flex items-center">
                  <FaSpinner className="animate-spin text-blue-500 mr-2" size={24} />
                  <p className="text-blue-900 mb-4">Creating session...</p>
                </div>
              ) : (
                <button
                  onClick={generateQuestions}
                  className="bg-primary text-white py-2 px-4 rounded hover:bg-blue-600 transition"
                >
                  Retry
                </button>
              )}
            </div>
          )}
        </div>
      )}
    </>
  );
};

export default DrivingQuestionStep;
